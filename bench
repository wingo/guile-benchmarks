#! /usr/bin/env bash

# For running R7RS benchmarks.
#
# Please report any errors or extensions to the author:
#
#   William D Clinger (will@ccs.neu.edu)
#
# This script was adapted from the similar script in
# test/Benchmarking/R6RS, which was itself loosely modelled
# after Marc Feeley's script for benchmarking R5RS systems,
# with additional contributions by Harvey Stein.
#
# Usage:
#
#     % cd test/Benchmarking/R7RS
#     % ./bench <system> <benchmark>
#
# For the current list of systems and benchmarks, run this
# script with no arguments.
#
# The benchmarks must be contained within a src subdirectory
# of the directory in which this script is run.
#
# The inputs to the benchmarks must be contained within an
# inputs subdirectory of the directory in which this script
# is run.

OSNAME="`( uname )`"
HOME="`( pwd )`"
SRC="${HOME}/src"
SUPPORT="${HOME}/support"
INPUTS="${HOME}/inputs"

################################################################

# These are Larceny's R6RS benchmarks revised for R7RS, with
# the following omissions (and reasons):
#
#    dderiv        (used hashtables)
#    cat2          (used UTF-8, so it's usually the same as cat)
#    cat3          (used UTF-16, which is not portably available in R7RS small)
#    read0         (extensive testing of R6RS lexical syntax needs conversion)
#    read2         (used UTF-8, so it's usually the same as read1)
#    read3         (used UTF-16, which is not portably available in R7RS small)
#    bibfreq       (used hashtables)
#    bibfreq2      (used hashtables)
#    normalization (used Unicode normalization)
#    listsort      (used R6RS list-sort)
#    vecsort       (used R6RS vector-sort)
#    hashtable0    (used hashtables)
#
# In addition, the bv2string benchmark was reduced to testing
# conversions between strings and UTF-8.

GABRIEL_BENCHMARKS="browse deriv destruc diviter divrec puzzle triangl tak takl ntakl cpstak ctak"

NUM_BENCHMARKS="fib fibc fibfp sum sumfp fft mbrot mbrotZ nucleic pi pnpoly ray simplex"

KVW_BENCHMARKS="ack array1 string sum1 cat tail wc"

IO_BENCHMARKS="read1"

OTHER_BENCHMARKS="compiler conform dynamic earley graphs lattice matrix maze mazefun nqueens paraffins parsing peval primes quicksort scheme slatex chudnovsky"

GC_BENCHMARKS="nboyer sboyer gcbench mperm"

SYNTH_BENCHMARKS="equal bv2string"

ALL_BENCHMARKS="$GABRIEL_BENCHMARKS $NUM_BENCHMARKS $KVW_BENCHMARKS $IO_BENCHMARKS $OTHER_BENCHMARKS $GC_BENCHMARKS $SYNTH_BENCHMARKS"

ALL_SYSTEMS="chez chicken gambitc guile larceny"
################################################################

NB_RUNS=1
clean=true
options=""

# Where the tested systems are located on our machines.

EXEC_ENV="time numactl --cpunodebind=0 --membind=0 --"
CHEZ=${CHEZ:-guix environment --pure --ad-hoc chez-scheme chez-srfi -- chez-scheme}
CHICKEN_CSC=${CHICKEN_CSC:-guix environment --pure --ad-hoc chicken -- csc}
GAMBITC=${GAMBITC:-guix environment --pure --ad-hoc gambit-c gcc-toolchain -- gsc}
GUILD=${GUILD:-guix environment --pure --ad-hoc guile-next -- guild}
GUILE=${GUILE:-guix environment --pure --ad-hoc guile-next -- guile}
LARCENY=${LARCENY:-guix environment --pure --ad-hoc larceny -- larceny}

# -----------------------------------------------------------------------------

error ()
{
    echo $1
    echo '
Usage: bench [-r runs] <system> <benchmark>

<system> is the abbreviated name of the implementation to benchmark:

  chez             for Chez Scheme
  chicken          for Chicken (compiled)
  gambitc          for GambitC Scheme
  guile            for Guile Scheme
  larceny          for Larceny
  all              for all of the above

<benchmark> is the name of the benchmark(s) to run:

  all         for all of the usual benchmarks
  fib         for the fib benchmark
  "fib ack"   for the fib and ack benchmarks

runs is the number of times to run each benchmark (default is 1).'

    exit
}

evaluate ()
{
    sleep 1
    (
        echo
        echo Testing $1 under ${NAME}
        make_src_code $1
        if test -n "$COMP"; then
          echo Compiling...
          echo $COMP "${TEMP}/$1.${EXTENSION}" "${TEMP}/$1.${EXTENSIONCOMP}"
          $COMP "${TEMP}/$1.${EXTENSION}" "${TEMP}/$1.${EXTENSIONCOMP}"
          if [ $? -ne 0 ]
          then
              echo "+!CSVLINE!+${2},$1,COMPILEERROR"
              skiprun="true"
          fi
        fi
        i=0
        if [ "$skiprun" != "true" ]
        then
            while [ "$i" -lt "$NB_RUNS" ]
            do
                echo Running...
                echo $EXEC_ENV $EXEC "${TEMP}/$1.${EXTENSIONCOMP}" "<" "${INPUTS}/$1.input"
                $EXEC_ENV $EXEC "${TEMP}/$1.${EXTENSIONCOMP}" < "${INPUTS}/$1.input"
                status=$?
                if [ $status -ne 0 ]; then
                    echo "+!CSVLINE!+${2},$1,CRASHED"
                fi
                i=`expr $i + 1`
            done
        fi
    ) 2>&1 | tee -a results.${NAME}
}

make_src_code ()
{
    prelude="${SUPPORT}/${NAME}-prelude.scm"
    postlude="${SUPPORT}/${NAME}-postlude.scm"

    if [ -e "$prelude" ]
    then
        echo "Including prelude $prelude"
    else
        prelude="/dev/null"
    fi
    if [ -e "$postlude" ]
    then
        echo "Including postlude $postlude"
    else
        postlude="/dev/null"
    fi

    cat "$prelude" "${SRC}/$1.scm" "${SUPPORT}/common.scm" "$postlude" "${SUPPORT}/common-postlude.scm" > "${TEMP}/$1.${EXTENSION}"
}

chez_comp ()
{
    :
}

chicken_comp ()
{
    OPTS="-R r7rs -X r7rs -optimize-leaf-routines -block -inline -inline-global -specialize -O2 -d0"
    ${CHICKEN_CSC} ${OPTS} $1 -o $2
}

# -----------------------------------------------------------------------------
# Definitions specific to Gambit Scheme

gambitc_comp ()
{
    # remove import statement
    sed -i -e 's/^(import (scheme.*)$//g' $1
    ${GAMBITC} -o $2 -exe $1
}

gambitc_exec ()
{
    time "$1" < "$2"
}

# -----------------------------------------------------------------------------
# Definitions specific to Guile Scheme

guile_comp ()
{
    # Guile's default optimization level is more suited to interactive
    # development.  Explicitly selecting -O3 allows it to more
    # aggressively inline top-level definitions.
    ${GUILD} compile -O3 $1
}

guile_exec ()
{
    time ${GUILE} "$1" < "$2"
}

# -----------------------------------------------------------------------------
# Definitions specific to Larceny
#
# The --nocontract command-line option reduces variability
# of timing, and probably corresponds to the default for
# most other systems.

larceny_comp ()
{
    :
}

larceny_exec ()
{
    # add srfi 112 for (implementation-version)
    sed -i 's/^(import /(import (srfi 112) /' $1
    time ${LARCENY} --nocontract --r7rs --program "$1" < "$2"
}


## Arg processing...
if [ "$#" -lt 2 ]; then
    error '>>> At least two command line arguments are needed'
fi


while [ $# -gt 2 ] ; do
    arg="$1"
    shift
    case $arg in
        -r) NB_RUNS=$1    ; shift ;;
        -c) clean=$1      ; shift ;;
        -o) options=$1    ; shift ;;
        *) error ">>> Unknown argument of $arg given." ;;
    esac
done

if [ "$#" -ne 2 ]; then
    error '>>> Last two arguments must be <system> and <benchmark>'
fi

case "$1" in
    all) systems="$ALL_SYSTEMS" ;;
    *) systems="$1" ;;
esac

case "$2" in
    all) benchmarks="$ALL_BENCHMARKS" ;;
    gabriel) benchmarks="$GABRIEL_BENCHMARKS" ;;
    kvw) benchmarks="$KVW_BENCHMARKS" ;;
    other) benchmarks="$OTHER_BENCHMARKS" ;;
    awk) benchmarks="$AWK_BENCHMARKS" ;;
    c) benchmarks="$C_BENCHMARKS" ;;
    java) benchmarks="$JAVA_BENCHMARKS" ;;
    *) benchmarks="$2" ;;
esac

## Run each benchmark under each system...
for system in $systems ; do

    case "$system" in

        chez) NAME='Chez'
              COMP=
              EXEC="$CHEZ --optimize-level 2 --compile-imported-libraries --libdirs $HOME/../chez-scheme-libraries:$(guix environment --pure --ad-hoc chez-scheme chez-srfi bash -- bash -c 'echo $CHEZSCHEMELIBDIRS') --program"
              EXTENSION="scm"
              EXTENSIONCOMP="scm"
              ;;

        chicken) NAME='Chicken'
                 COMP=chicken_comp
                 EXEC=
                 EXTENSION="scm"
                 EXTENSIONCOMP="exe"
                 ;;

        gambitc) NAME='GambitC'
                 COMP=gambitc_comp
                 EXEC=
                 EXTENSION="scm"
                 EXTENSIONCOMP="exe"
                 ;;

        guile) NAME='Guile'
               COMP=guile_comp
               EXEC="$GUILE"
               EXTENSION="scm"
               EXTENSIONCOMP="scm"
               ;;

        larceny) NAME='Larceny'
                 COMP=larceny_comp
                 EXEC=larceny_exec
                 EXTENSION="scm"
                 EXTENSIONCOMP="scm"
                 ;;

        *) echo "Unknown Scheme"
           exit -1
           ;;
    esac

    {
        echo
        echo '****************************'
        echo Benchmarking ${NAME} on `date` under `uname -a`
    } >> results.${NAME}
    TEMP="/tmp/larcenous/${NAME}"
    mkdir -p "${TEMP}" 2> /dev/null

    for program in $benchmarks ; do
        evaluate $program $system
    done
done
